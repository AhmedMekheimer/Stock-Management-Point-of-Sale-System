// <auto-generated />
using System;
using InfrastructureLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfrastructureLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251003233315_SalesInvoicesSeedingAgain")]
    partial class SalesInvoicesSeedingAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoreLayer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ADMIN-0001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b8e7c11-4f94-44b6-bd2a-23456789abcd",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Admin@system.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SYSTEM.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKJjDl/uiaaUyRTYVIUZQTZ+8Ag91FJZAO++PSmmunHQ4zeKohcN1tdI4+EBTgKGcA==",
                            PhoneNumber = "+201000000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c67d3f6a-9df2-4c2b-9d29-123456789abc",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "CASHIER-0001",
                            AccessFailedCount = 0,
                            BranchId = 1,
                            ConcurrencyStamp = "b9876543-c21d-4fed-8765-abcdef123456",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Cashier@system.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CASHIER@SYSTEM.COM",
                            NormalizedUserName = "CASHIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEM1n6yL7RkI7GnXYVPh4eM6S2f/JXc1qR9mVh6Qv0I8K4OaX9O0xSck5x8uQ3+eU9w==",
                            PhoneNumber = "+201111111111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a1234567-b89c-4def-9012-1234567890ab",
                            TwoFactorEnabled = false,
                            UserName = "Cashier"
                        },
                        new
                        {
                            Id = "BRANCH-0001",
                            AccessFailedCount = 0,
                            BranchId = 1,
                            ConcurrencyStamp = "d11a4b23-9b73-44b6-9e28-fedcba987654",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "BranchUser@system.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRANCHUSER@SYSTEM.COM",
                            NormalizedUserName = "BRANCHUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKH+0zUzi5Y9I0F5VZ1+6tH8bUuQ3YzHf+8eK1J1N3mOqP2bXcW5r1y9Q1x7sU2F==",
                            PhoneNumber = "+201222222222",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e72d5a42-5ff3-4e92-a34c-abcdef123456",
                            TwoFactorEnabled = false,
                            UserName = "BranchUser"
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.ApplicationUserOTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OTPNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUserOTP");
                });

            modelBuilder.Entity("CoreLayer.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main Street, City Center",
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Main Branch",
                            PhoneNumber = "+1234567890"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 East Street, East Town",
                            CreatedDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East Side Branch",
                            PhoneNumber = "+1987654321"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 West Avenue, Westside",
                            CreatedDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "West End Branch",
                            PhoneNumber = "+1123456789"
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.BranchItem", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<double>("BuyingPriceAvg")
                        .HasColumnType("float");

                    b.Property<int>("DiscountRate")
                        .HasColumnType("int");

                    b.Property<double>("LastBuyingPrice")
                        .HasColumnType("float");

                    b.Property<int>("OutDatedInMonths")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RestockThreshold")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.HasKey("BranchId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("BranchItems");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            ItemId = 1,
                            BuyingPriceAvg = 0.0,
                            DiscountRate = 0,
                            LastBuyingPrice = 0.0,
                            OutDatedInMonths = 0,
                            Quantity = 0,
                            RestockThreshold = 0,
                            SellingPrice = 0.0
                        },
                        new
                        {
                            BranchId = 1,
                            ItemId = 2,
                            BuyingPriceAvg = 0.0,
                            DiscountRate = 0,
                            LastBuyingPrice = 0.0,
                            OutDatedInMonths = 0,
                            Quantity = 0,
                            RestockThreshold = 0,
                            SellingPrice = 0.0
                        },
                        new
                        {
                            BranchId = 2,
                            ItemId = 1,
                            BuyingPriceAvg = 0.0,
                            DiscountRate = 0,
                            LastBuyingPrice = 0.0,
                            OutDatedInMonths = 0,
                            Quantity = 0,
                            RestockThreshold = 0,
                            SellingPrice = 0.0
                        },
                        new
                        {
                            BranchId = 2,
                            ItemId = 2,
                            BuyingPriceAvg = 0.0,
                            DiscountRate = 0,
                            LastBuyingPrice = 0.0,
                            OutDatedInMonths = 0,
                            Quantity = 0,
                            RestockThreshold = 0,
                            SellingPrice = 0.0
                        },
                        new
                        {
                            BranchId = 3,
                            ItemId = 1,
                            BuyingPriceAvg = 0.0,
                            DiscountRate = 0,
                            LastBuyingPrice = 0.0,
                            OutDatedInMonths = 0,
                            Quantity = 0,
                            RestockThreshold = 0,
                            SellingPrice = 0.0
                        },
                        new
                        {
                            BranchId = 3,
                            ItemId = 2,
                            BuyingPriceAvg = 0.0,
                            DiscountRate = 0,
                            LastBuyingPrice = 0.0,
                            OutDatedInMonths = 0,
                            Quantity = 0,
                            RestockThreshold = 0,
                            SellingPrice = 0.0
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.BranchItemSalesInvoice", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "ItemId", "OperationId");

                    b.HasIndex("OperationId");

                    b.ToTable("BranchItemSalesInvoices");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            ItemId = 1,
                            OperationId = 3
                        },
                        new
                        {
                            BranchId = 2,
                            ItemId = 1,
                            OperationId = 4
                        },
                        new
                        {
                            BranchId = 2,
                            ItemId = 2,
                            OperationId = 4
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentUses")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaximumUses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentUses = 0,
                            ExpirationDate = new DateOnly(2028, 1, 1),
                            IsActive = true,
                            MaximumUses = 100,
                            Name = "New Year Offer",
                            Rate = 15
                        },
                        new
                        {
                            Id = 2,
                            CurrentUses = 0,
                            ExpirationDate = new DateOnly(2025, 11, 30),
                            IsActive = true,
                            MaximumUses = 500,
                            Name = "Black Friday",
                            Rate = 25
                        },
                        new
                        {
                            Id = 3,
                            CurrentUses = 0,
                            IsActive = true,
                            Name = "Loyalty Discount",
                            Rate = 2
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.DiscountSalesInvoice", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId", "OperationId");

                    b.HasIndex("OperationId");

                    b.ToTable("DiscountSalesInvoices");

                    b.HasData(
                        new
                        {
                            DiscountId = 3,
                            OperationId = 3
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("TargetAudienceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SizeId");

                    b.HasIndex("TargetAudienceId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "ITEM-0001",
                            BrandId = 1,
                            ColorId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Image = "PoloTshirt.jpg",
                            ItemTypeId = 3,
                            Name = "Polo Tshirt",
                            SizeId = 1,
                            TargetAudienceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "ITEM-0002",
                            BrandId = 2,
                            ColorId = 2,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Image = "ZaraTshirt.jpg",
                            ItemTypeId = 3,
                            Name = "Zara Tshirt",
                            SizeId = 1,
                            TargetAudienceId = 1
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "nike.png",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            Image = "adidas.png",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            Image = "puma.png",
                            Name = "Puma"
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "red.png",
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Image = "blue.png",
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            Image = "black.png",
                            Name = "Black"
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[ItemTypeId] IS NULL");

                    b.HasIndex("ItemTypeId", "Name")
                        .IsUnique()
                        .HasFilter("[ItemTypeId] IS NOT NULL");

                    b.ToTable("ItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "clothing.png",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 2,
                            Image = "shoes.png",
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 3,
                            Image = "tshirts.png",
                            ItemTypeId = 1,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 4,
                            Image = "sneakers.png",
                            ItemTypeId = 2,
                            Name = "Sneakers"
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "s.png",
                            Name = "Small"
                        },
                        new
                        {
                            Id = 2,
                            Image = "m.png",
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Image = "l.png",
                            Name = "Large"
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.TargetAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TargetAudiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "men.png",
                            Name = "Men"
                        },
                        new
                        {
                            Id = 2,
                            Image = "women.png",
                            Name = "Women"
                        },
                        new
                        {
                            Id = 3,
                            Image = "kids.png",
                            Name = "Kids"
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("float");

                    b.Property<int>("RoundedGrandTotal")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalDiscountAmount")
                        .HasColumnType("float");

                    b.Property<int?>("TotalDiscountRate")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<double?>("TotalTaxesAmount")
                        .HasColumnType("float");

                    b.Property<int?>("TotalTaxesRate")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Operations", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CoreLayer.Models.OperationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BuyingPrice")
                        .HasColumnType("float");

                    b.Property<int?>("DiscountRate")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyingPrice = 15000.0,
                            ItemId = 1,
                            OperationId = 1,
                            Quantity = 1,
                            SellingPrice = 0.0,
                            TotalPrice = 15000.0
                        },
                        new
                        {
                            Id = 2,
                            BuyingPrice = 200.0,
                            ItemId = 2,
                            OperationId = 1,
                            Quantity = 1,
                            SellingPrice = 0.0,
                            TotalPrice = 200.0
                        },
                        new
                        {
                            Id = 3,
                            BuyingPrice = 15000.0,
                            ItemId = 1,
                            OperationId = 2,
                            Quantity = 1,
                            SellingPrice = 0.0,
                            TotalPrice = 15000.0
                        },
                        new
                        {
                            Id = 4,
                            BuyingPrice = 0.0,
                            ItemId = 1,
                            OperationId = 3,
                            Quantity = 50,
                            SellingPrice = 100.0,
                            TotalPrice = 5000.0
                        },
                        new
                        {
                            Id = 5,
                            BuyingPrice = 0.0,
                            ItemId = 1,
                            OperationId = 4,
                            Quantity = 10,
                            SellingPrice = 100.0,
                            TotalPrice = 1000.0
                        },
                        new
                        {
                            Id = 6,
                            BuyingPrice = 0.0,
                            ItemId = 2,
                            OperationId = 4,
                            Quantity = 10,
                            SellingPrice = 100.0,
                            TotalPrice = 1000.0
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("partnerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Partners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Anonymous Customer",
                            PhoneNumber = "",
                            partnerType = 2
                        },
                        new
                        {
                            Id = 2,
                            Email = "john.doe@example.com",
                            Name = "John Doe",
                            PhoneNumber = "+201112223344",
                            partnerType = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "sales@xyzretail.com",
                            Name = "XYZ Retail",
                            PhoneNumber = "+201223344556",
                            partnerType = 2
                        },
                        new
                        {
                            Id = 4,
                            Email = "contact@abc.com",
                            Name = "ABC Suppliers",
                            PhoneNumber = "+201001112233",
                            partnerType = 1
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnglishName = "System",
                            Name = "System"
                        },
                        new
                        {
                            Id = 10,
                            EnglishName = "Branch",
                            Name = "Branch",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 100,
                            EnglishName = "Stock",
                            Name = "Stock",
                            ParentId = 10
                        },
                        new
                        {
                            Id = 101,
                            EnglishName = "View Stock",
                            Name = "Stock.View",
                            ParentId = 100
                        },
                        new
                        {
                            Id = 102,
                            EnglishName = "Add Stock",
                            Name = "Stock.Add",
                            ParentId = 100
                        },
                        new
                        {
                            Id = 103,
                            EnglishName = "Edit Stock",
                            Name = "Stock.Edit",
                            ParentId = 100
                        },
                        new
                        {
                            Id = 104,
                            EnglishName = "Delete Stock",
                            Name = "Stock.Delete",
                            ParentId = 100
                        },
                        new
                        {
                            Id = 120,
                            EnglishName = "Receive Order",
                            Name = "ReceiveOrder",
                            ParentId = 10
                        },
                        new
                        {
                            Id = 121,
                            EnglishName = "View Receive Order",
                            Name = "ReceiveOrder.View",
                            ParentId = 120
                        },
                        new
                        {
                            Id = 122,
                            EnglishName = "Add Receive Order",
                            Name = "ReceiveOrder.Add",
                            ParentId = 120
                        },
                        new
                        {
                            Id = 123,
                            EnglishName = "Edit Receive Order",
                            Name = "ReceiveOrder.Edit",
                            ParentId = 120
                        },
                        new
                        {
                            Id = 124,
                            EnglishName = "Delete Receive Order",
                            Name = "ReceiveOrder.Delete",
                            ParentId = 120
                        },
                        new
                        {
                            Id = 125,
                            EnglishName = "Confirm Receive Order",
                            Name = "ReceiveOrder.Confirm",
                            ParentId = 120
                        },
                        new
                        {
                            Id = 11,
                            EnglishName = "Item",
                            Name = "Item",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 140,
                            EnglishName = "Clothing Item",
                            Name = "ClothingItem",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 141,
                            EnglishName = "View ClothingItem",
                            Name = "ClothingItem.View",
                            ParentId = 140
                        },
                        new
                        {
                            Id = 142,
                            EnglishName = "Add ClothingItem",
                            Name = "ClothingItem.Add",
                            ParentId = 140
                        },
                        new
                        {
                            Id = 143,
                            EnglishName = "Edit ClothingItem",
                            Name = "ClothingItem.Edit",
                            ParentId = 140
                        },
                        new
                        {
                            Id = 144,
                            EnglishName = "Delete ClothingItem",
                            Name = "ClothingItem.Delete",
                            ParentId = 140
                        },
                        new
                        {
                            Id = 145,
                            EnglishName = "Add Data To A Branch",
                            Name = "ClothingItem.BranchItem",
                            ParentId = 140
                        },
                        new
                        {
                            Id = 160,
                            EnglishName = "Color",
                            Name = "Color",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 161,
                            EnglishName = "View Color",
                            Name = "Color.View",
                            ParentId = 160
                        },
                        new
                        {
                            Id = 162,
                            EnglishName = "Add Color",
                            Name = "Color.Add",
                            ParentId = 160
                        },
                        new
                        {
                            Id = 163,
                            EnglishName = "Edit Color",
                            Name = "Color.Edit",
                            ParentId = 160
                        },
                        new
                        {
                            Id = 164,
                            EnglishName = "Delete Color",
                            Name = "Color.Delete",
                            ParentId = 160
                        },
                        new
                        {
                            Id = 180,
                            EnglishName = "Size",
                            Name = "Size",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 181,
                            EnglishName = "View Size",
                            Name = "Size.View",
                            ParentId = 180
                        },
                        new
                        {
                            Id = 182,
                            EnglishName = "Add Size",
                            Name = "Size.Add",
                            ParentId = 180
                        },
                        new
                        {
                            Id = 183,
                            EnglishName = "Edit Size",
                            Name = "Size.Edit",
                            ParentId = 180
                        },
                        new
                        {
                            Id = 184,
                            EnglishName = "Delete Size",
                            Name = "Size.Delete",
                            ParentId = 180
                        },
                        new
                        {
                            Id = 200,
                            EnglishName = "Item Type",
                            Name = "ItemType",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 201,
                            EnglishName = "View Item Type",
                            Name = "ItemType.View",
                            ParentId = 200
                        },
                        new
                        {
                            Id = 202,
                            EnglishName = "Add Item Type",
                            Name = "ItemType.Add",
                            ParentId = 200
                        },
                        new
                        {
                            Id = 203,
                            EnglishName = "Edit Item Type",
                            Name = "ItemType.Edit",
                            ParentId = 200
                        },
                        new
                        {
                            Id = 204,
                            EnglishName = "Delete Item Type",
                            Name = "ItemType.Delete",
                            ParentId = 200
                        },
                        new
                        {
                            Id = 220,
                            EnglishName = "Target Audience",
                            Name = "TargetAudience",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 221,
                            EnglishName = "View Target Audience",
                            Name = "TargetAudience.View",
                            ParentId = 220
                        },
                        new
                        {
                            Id = 222,
                            EnglishName = "Add Target Audience",
                            Name = "TargetAudience.Add",
                            ParentId = 220
                        },
                        new
                        {
                            Id = 223,
                            EnglishName = "Edit Target Audience",
                            Name = "TargetAudience.Edit",
                            ParentId = 220
                        },
                        new
                        {
                            Id = 224,
                            EnglishName = "Delete Target Audience",
                            Name = "TargetAudience.Delete",
                            ParentId = 220
                        },
                        new
                        {
                            Id = 240,
                            EnglishName = "Brand",
                            Name = "Brand",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 241,
                            EnglishName = "View Brand",
                            Name = "Brand.View",
                            ParentId = 240
                        },
                        new
                        {
                            Id = 242,
                            EnglishName = "Add Brand",
                            Name = "Brand.Add",
                            ParentId = 240
                        },
                        new
                        {
                            Id = 243,
                            EnglishName = "Edit Brand",
                            Name = "Brand.Edit",
                            ParentId = 240
                        },
                        new
                        {
                            Id = 244,
                            EnglishName = "Delete Brand",
                            Name = "Brand.Delete",
                            ParentId = 240
                        },
                        new
                        {
                            Id = 12,
                            EnglishName = "Administrative",
                            Name = "Administrative",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 260,
                            EnglishName = "Partner",
                            Name = "Partner",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 261,
                            EnglishName = "View Partner",
                            Name = "Partner.View",
                            ParentId = 260
                        },
                        new
                        {
                            Id = 262,
                            EnglishName = "Add Partner",
                            Name = "Partner.Add",
                            ParentId = 260
                        },
                        new
                        {
                            Id = 263,
                            EnglishName = "Edit Partner",
                            Name = "Partner.Edit",
                            ParentId = 260
                        },
                        new
                        {
                            Id = 264,
                            EnglishName = "Delete Partner",
                            Name = "Partner.Delete",
                            ParentId = 260
                        },
                        new
                        {
                            Id = 280,
                            EnglishName = "User",
                            Name = "User",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 281,
                            EnglishName = "View User",
                            Name = "User.View",
                            ParentId = 280
                        },
                        new
                        {
                            Id = 282,
                            EnglishName = "Add User",
                            Name = "User.Add",
                            ParentId = 280
                        },
                        new
                        {
                            Id = 283,
                            EnglishName = "Edit User",
                            Name = "User.Edit",
                            ParentId = 280
                        },
                        new
                        {
                            Id = 284,
                            EnglishName = "Delete User",
                            Name = "User.Delete",
                            ParentId = 280
                        },
                        new
                        {
                            Id = 300,
                            EnglishName = "Role",
                            Name = "Role",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 301,
                            EnglishName = "View Role",
                            Name = "Role.View",
                            ParentId = 300
                        },
                        new
                        {
                            Id = 302,
                            EnglishName = "Add Role",
                            Name = "Role.Add",
                            ParentId = 300
                        },
                        new
                        {
                            Id = 303,
                            EnglishName = "Edit Role",
                            Name = "Role.Edit",
                            ParentId = 300
                        },
                        new
                        {
                            Id = 304,
                            EnglishName = "Delete Role",
                            Name = "Role.Delete",
                            ParentId = 300
                        },
                        new
                        {
                            Id = 340,
                            EnglishName = "Tax",
                            Name = "Tax",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 341,
                            EnglishName = "View Tax",
                            Name = "Tax.View",
                            ParentId = 340
                        },
                        new
                        {
                            Id = 342,
                            EnglishName = "Add Tax",
                            Name = "Tax.Add",
                            ParentId = 340
                        },
                        new
                        {
                            Id = 343,
                            EnglishName = "Edit Tax",
                            Name = "Tax.Edit",
                            ParentId = 340
                        },
                        new
                        {
                            Id = 344,
                            EnglishName = "Delete Tax",
                            Name = "Tax.Delete",
                            ParentId = 340
                        },
                        new
                        {
                            Id = 360,
                            EnglishName = "Discount",
                            Name = "Discount",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 361,
                            EnglishName = "View Discount",
                            Name = "Discount.View",
                            ParentId = 360
                        },
                        new
                        {
                            Id = 362,
                            EnglishName = "Add Discount",
                            Name = "Discount.Add",
                            ParentId = 360
                        },
                        new
                        {
                            Id = 363,
                            EnglishName = "Edit Discount",
                            Name = "Discount.Edit",
                            ParentId = 360
                        },
                        new
                        {
                            Id = 364,
                            EnglishName = "Delete Discount",
                            Name = "Discount.Delete",
                            ParentId = 360
                        },
                        new
                        {
                            Id = 380,
                            EnglishName = "User Login History",
                            Name = "UserLoginHistory",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 381,
                            EnglishName = "View UserLoginHistory",
                            Name = "UserLoginHistory.View",
                            ParentId = 380
                        },
                        new
                        {
                            Id = 13,
                            EnglishName = "Sales",
                            Name = "Sales",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 400,
                            EnglishName = "POS",
                            Name = "POS",
                            ParentId = 13
                        },
                        new
                        {
                            Id = 420,
                            EnglishName = "Sales Invoice",
                            Name = "SalesInvoice",
                            ParentId = 13
                        },
                        new
                        {
                            Id = 421,
                            EnglishName = "View Sales Invoice",
                            Name = "SalesInvoice.View",
                            ParentId = 420
                        },
                        new
                        {
                            Id = 422,
                            EnglishName = "Print Sales Invoice",
                            Name = "SalesInvoice.Print",
                            ParentId = 420
                        },
                        new
                        {
                            Id = 14,
                            EnglishName = "Dashboard",
                            Name = "Dashboard",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 440,
                            EnglishName = "View Dashboard",
                            Name = "Dashboard.View",
                            ParentId = 14
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("CoreLayer.Models.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Taxes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "VAT",
                            Rate = 14
                        },
                        new
                        {
                            Id = 2,
                            Name = "Service Tax",
                            Rate = 10
                        },
                        new
                        {
                            Id = 3,
                            Name = "Luxury Tax",
                            Rate = 5
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.TaxReceiveOrder", b =>
                {
                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.HasKey("TaxId", "OperationId");

                    b.HasIndex("OperationId");

                    b.ToTable("TaxReceiveOrders");
                });

            modelBuilder.Entity("CoreLayer.Models.UserLoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userLoginHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ROLE-Super Admin",
                            ConcurrencyStamp = "00000000-0000-0000-0000-00000000000",
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = "ROLE-ADMIN",
                            ConcurrencyStamp = "11111111-1111-1111-1111-111111111111",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ROLE-CASHIER",
                            ConcurrencyStamp = "22222222-2222-2222-2222-222222222222",
                            Name = "Cashier User",
                            NormalizedName = "CASHIER USER"
                        },
                        new
                        {
                            Id = "ROLE-BRANCH",
                            ConcurrencyStamp = "33333333-3333-3333-3333-333333333333",
                            Name = "Branch User",
                            NormalizedName = "BRANCH USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ADMIN-0001",
                            RoleId = "ROLE-ADMIN"
                        },
                        new
                        {
                            UserId = "CASHIER-0001",
                            RoleId = "ROLE-CASHIER"
                        },
                        new
                        {
                            UserId = "BRANCH-0001",
                            RoleId = "ROLE-BRANCH"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CoreLayer.Models.Operations.ReceiveOrder", b =>
                {
                    b.HasBaseType("CoreLayer.Models.Operation");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasIndex("BranchId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ReceiveOrders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "BRANCH-0001",
                            Code = "2_1_1",
                            Date = new DateOnly(2025, 1, 1),
                            GrandTotal = 16720.0,
                            RoundedGrandTotal = 16720,
                            Time = new TimeOnly(10, 0, 0),
                            TotalAmount = 15200.0,
                            TotalDiscountAmount = 0.0,
                            TotalDiscountRate = 0,
                            TotalQuantity = 2,
                            TotalTaxesAmount = 1520.0,
                            TotalTaxesRate = 10,
                            status = 1,
                            BranchId = 1,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "ADMIN-0001",
                            Code = "2_1_2",
                            Date = new DateOnly(2025, 3, 1),
                            GrandTotal = 15750.0,
                            RoundedGrandTotal = 15750,
                            Time = new TimeOnly(10, 0, 0),
                            TotalAmount = 15000.0,
                            TotalDiscountAmount = 0.0,
                            TotalDiscountRate = 0,
                            TotalQuantity = 1,
                            TotalTaxesAmount = 750.0,
                            TotalTaxesRate = 5,
                            status = 1,
                            BranchId = 1,
                            SupplierId = 4
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.Operations.SalesInvoice", b =>
                {
                    b.HasBaseType("CoreLayer.Models.Operation");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Change")
                        .HasColumnType("int");

                    b.Property<int>("PaidCash")
                        .HasColumnType("int");

                    b.Property<int>("RetailCustomerId")
                        .HasColumnType("int");

                    b.HasIndex("BranchId");

                    b.HasIndex("RetailCustomerId");

                    b.ToTable("SalesInvoices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "BRANCH-0001",
                            Code = "1_1_3",
                            Date = new DateOnly(2025, 1, 1),
                            GrandTotal = 4950.0,
                            RoundedGrandTotal = 4950,
                            Time = new TimeOnly(10, 0, 0),
                            TotalAmount = 5000.0,
                            TotalDiscountAmount = 50.0,
                            TotalDiscountRate = 2,
                            TotalQuantity = 50,
                            status = 1,
                            BranchId = 1,
                            Change = 50,
                            PaidCash = 5000,
                            RetailCustomerId = 1
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = "CASHIER-0001",
                            Code = "1_1_4",
                            Date = new DateOnly(2025, 1, 1),
                            GrandTotal = 2000.0,
                            RoundedGrandTotal = 2000,
                            Time = new TimeOnly(10, 0, 0),
                            TotalAmount = 2000.0,
                            TotalDiscountAmount = 0.0,
                            TotalDiscountRate = 0,
                            TotalQuantity = 20,
                            status = 1,
                            BranchId = 1,
                            Change = 0,
                            PaidCash = 2000,
                            RetailCustomerId = 2
                        });
                });

            modelBuilder.Entity("CoreLayer.Models.Operations.Transfer", b =>
                {
                    b.HasBaseType("CoreLayer.Models.Operation");

                    b.Property<int>("FromBranchId")
                        .HasColumnType("int");

                    b.Property<int>("ToBranchId")
                        .HasColumnType("int");

                    b.HasIndex("FromBranchId");

                    b.HasIndex("ToBranchId");

                    b.ToTable("Transfers", (string)null);
                });

            modelBuilder.Entity("CoreLayer.Models.ApplicationUser", b =>
                {
                    b.HasOne("CoreLayer.Models.Branch", "Branch")
                        .WithMany("Cashiers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("CoreLayer.Models.ApplicationUserOTP", b =>
                {
                    b.HasOne("CoreLayer.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserOTPs")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CoreLayer.Models.BranchItem", b =>
                {
                    b.HasOne("CoreLayer.Models.Branch", "Branch")
                        .WithMany("BranchItems")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Item", "Item")
                        .WithMany("BranchItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CoreLayer.Models.BranchItemSalesInvoice", b =>
                {
                    b.HasOne("CoreLayer.Models.Operations.SalesInvoice", "SalesInvoice")
                        .WithMany("BranchItemSalesInvoices")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.BranchItem", "BranchItem")
                        .WithMany("BranchItemSalesInvoices")
                        .HasForeignKey("BranchId", "ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchItem");

                    b.Navigation("SalesInvoice");
                });

            modelBuilder.Entity("CoreLayer.Models.DiscountSalesInvoice", b =>
                {
                    b.HasOne("CoreLayer.Models.Discount", "Discount")
                        .WithMany("DiscountSalesInvoices")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Operations.SalesInvoice", "SalesInvoice")
                        .WithMany("DiscountSalesInvoices")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("SalesInvoice");
                });

            modelBuilder.Entity("CoreLayer.Models.Item", b =>
                {
                    b.HasOne("CoreLayer.Models.ItemVarients.Brand", "Brand")
                        .WithMany("Items")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.ItemVarients.Color", "Color")
                        .WithMany("Items")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.ItemVarients.ItemType", "ItemType")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.ItemVarients.Size", "Size")
                        .WithMany("Items")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.ItemVarients.TargetAudience", "TargetAudience")
                        .WithMany("Items")
                        .HasForeignKey("TargetAudienceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("ItemType");

                    b.Navigation("Size");

                    b.Navigation("TargetAudience");
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.ItemType", b =>
                {
                    b.HasOne("CoreLayer.Models.ItemVarients.ItemType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CoreLayer.Models.Operation", b =>
                {
                    b.HasOne("CoreLayer.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CoreLayer.Models.OperationItem", b =>
                {
                    b.HasOne("CoreLayer.Models.Item", "Item")
                        .WithMany("OperationItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Operation", "Operation")
                        .WithMany("OperationItems")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("CoreLayer.Models.Permission", b =>
                {
                    b.HasOne("CoreLayer.Models.Permission", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CoreLayer.Models.RolePermission", b =>
                {
                    b.HasOne("CoreLayer.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoreLayer.Models.TaxReceiveOrder", b =>
                {
                    b.HasOne("CoreLayer.Models.Operations.ReceiveOrder", "ReceiveOrder")
                        .WithMany("TaxReceiveOrders")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Tax", "Tax")
                        .WithMany("TaxReceiveOrders")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiveOrder");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("CoreLayer.Models.UserLoginHistory", b =>
                {
                    b.HasOne("CoreLayer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoreLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoreLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoreLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLayer.Models.Operations.ReceiveOrder", b =>
                {
                    b.HasOne("CoreLayer.Models.Branch", "Branch")
                        .WithMany("ReceiveOrders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Operation", null)
                        .WithOne()
                        .HasForeignKey("CoreLayer.Models.Operations.ReceiveOrder", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Partner", "Supplier")
                        .WithMany("ReceiveOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CoreLayer.Models.Operations.SalesInvoice", b =>
                {
                    b.HasOne("CoreLayer.Models.Branch", "Branch")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Operation", null)
                        .WithOne()
                        .HasForeignKey("CoreLayer.Models.Operations.SalesInvoice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Partner", "RetailCustomer")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("RetailCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("RetailCustomer");
                });

            modelBuilder.Entity("CoreLayer.Models.Operations.Transfer", b =>
                {
                    b.HasOne("CoreLayer.Models.Branch", "FromBranch")
                        .WithMany("OutgoingTransfers")
                        .HasForeignKey("FromBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Operation", null)
                        .WithOne()
                        .HasForeignKey("CoreLayer.Models.Operations.Transfer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLayer.Models.Branch", "ToBranch")
                        .WithMany("IncomingTransfers")
                        .HasForeignKey("ToBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromBranch");

                    b.Navigation("ToBranch");
                });

            modelBuilder.Entity("CoreLayer.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserOTPs");
                });

            modelBuilder.Entity("CoreLayer.Models.Branch", b =>
                {
                    b.Navigation("BranchItems");

                    b.Navigation("Cashiers");

                    b.Navigation("IncomingTransfers");

                    b.Navigation("OutgoingTransfers");

                    b.Navigation("ReceiveOrders");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("CoreLayer.Models.BranchItem", b =>
                {
                    b.Navigation("BranchItemSalesInvoices");
                });

            modelBuilder.Entity("CoreLayer.Models.Discount", b =>
                {
                    b.Navigation("DiscountSalesInvoices");
                });

            modelBuilder.Entity("CoreLayer.Models.Item", b =>
                {
                    b.Navigation("BranchItems");

                    b.Navigation("OperationItems");
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.Brand", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.Color", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.ItemType", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.Size", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CoreLayer.Models.ItemVarients.TargetAudience", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CoreLayer.Models.Operation", b =>
                {
                    b.Navigation("OperationItems");
                });

            modelBuilder.Entity("CoreLayer.Models.Partner", b =>
                {
                    b.Navigation("ReceiveOrders");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("CoreLayer.Models.Permission", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("CoreLayer.Models.Tax", b =>
                {
                    b.Navigation("TaxReceiveOrders");
                });

            modelBuilder.Entity("CoreLayer.Models.Operations.ReceiveOrder", b =>
                {
                    b.Navigation("TaxReceiveOrders");
                });

            modelBuilder.Entity("CoreLayer.Models.Operations.SalesInvoice", b =>
                {
                    b.Navigation("BranchItemSalesInvoices");

                    b.Navigation("DiscountSalesInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
